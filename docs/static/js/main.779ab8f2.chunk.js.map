{"version":3,"sources":["components/AgregarCategoria.js","helpers/getGifs.js","components/GiftGridItem.js","components/GifGrid.js","hooks/useFecthGifs.js","GitExpertApp.js","index.js"],"names":["AgregarCategoria","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","length","cate","type","value","onChange","target","obtenerGifts","categoria","a","url","encodeURI","fetch","respuesta","json","data","imagenes","map","img","id","images","downsized_medium","title","GiftGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFecthGifs","key","GitExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"2NAIaA,EAAmB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACfC,mBAAS,IADM,mBAC5CC,EAD4C,KAChCC,EADgC,KAanD,OACI,0BAAMC,SATU,SAACC,GACjBA,EAAEC,iBACEJ,EAAWK,OAAS,IACpBP,GAAc,SAAAQ,GAAI,OAAKN,GAAL,mBAAmBM,OACrCL,EAAc,OAMd,2BAAOM,KAAK,OAAOC,MAAOR,EAAYS,SAbnB,SAACN,GACxBF,EAAcE,EAAEO,OAAOF,Y,uBCPlBG,EAAY,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAClBC,EADkB,iDAC8BC,UAAUH,GADxC,8DAEAI,MAAMF,GAFN,cAElBG,EAFkB,gBAGDA,EAAUC,OAHT,uBAGhBC,EAHgB,EAGhBA,KAEFC,EAAWD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC7B,MAAO,CACHC,GAAID,EAAIC,GACRT,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,IAClCY,MAAOJ,EAAII,UATK,kBAajBN,GAbiB,4CAAH,sDCGZO,EAAe,SAAC,GAAmB,IAAlBD,EAAiB,EAAjBA,MAAOZ,EAAU,EAAVA,IACjC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAKJ,IACpB,2BAAIA,KCHHK,EAAU,SAAC,GAAmB,IAAjBnB,EAAgB,EAAhBA,UAAgB,ECDd,SAACA,GAAe,IAAD,EACbb,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAH0B,mBAChCC,EADgC,KACzBC,EADyB,KAgBvC,OAVAC,qBAAU,WACNxB,EAAaC,GAAWwB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CAC1Cf,KAAMkB,EACNL,SAAS,SAGb,CAACpB,IAIEqB,EDb6BK,CAAa1B,GAAnCQ,EAFwB,EAE9BD,KAAgBa,EAFc,EAEdA,QAGxB,OACI,oCACI,4BAAKpB,GACJoB,GAAU,uBAAGJ,UAAU,oCAAb,wBACX,yBAAKA,UAAU,aAEPR,EAASC,KAAI,SAACC,GAAD,OACT,kBAAC,EAAD,eAAciB,IAAKjB,EAAIC,IAAQD,UEaxCkB,EAzBM,WAAO,IAAD,EACazC,mBAAS,CAAC,iBADvB,mBAChB0C,EADgB,KACJ3C,EADI,KAMvB,OACI,6BACI,8CACA,kBAAC,EAAD,CAAkBA,cAAeA,IACjC,6BAEA,4BAEQ2C,EAAWpB,KAAI,SAAAT,GACX,OACI,kBAAC,EAAD,CAAS2B,IAAK3B,EAAWA,UAAWA,UCfhE8B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.779ab8f2.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AgregarCategoria = ({ setCategorias }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleCambiarInput = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n    const handlEnviar = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.length > 2) {\r\n            setCategorias(cate => [inputValue,...cate])\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handlEnviar}>\r\n            <input type=\"text\" value={inputValue} onChange={handleCambiarInput} />\r\n        </form>\r\n    )\r\n}\r\n\r\nAgregarCategoria.propTypes ={\r\n    setCategorias: PropTypes.func.isRequired\r\n}\r\n","export const obtenerGifts = async (categoria) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=5&api_key=4bEFTSMLbl3oCVoO0Of5cPABUXnprveX`;\r\n    const respuesta = await fetch(url);\r\n    const { data } = await respuesta.json();\r\n\r\n    const imagenes = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            url: img.images?.downsized_medium.url,\r\n            title: img.title,\r\n        }\r\n    });\r\n    \r\n    return imagenes;\r\n}\r\n","import React from 'react'\r\nimport '../index.css';\r\n\r\nexport const GiftGridItem = ({title, url }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadein\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFecthGifs } from '../hooks/useFecthGifs'\r\nimport { GiftGridItem } from './GiftGridItem'\r\n\r\nexport const GifGrid = ({ categoria }) => {\r\n\r\n    const { data: imagenes, loading } = useFecthGifs(categoria);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3>{categoria}</h3>\r\n            {loading &&<p className='animate__animated animate__flash'>Cargando imagenes...</p> }\r\n            <div className=\"card-grid\" >\r\n                {\r\n                    imagenes.map((img) => (\r\n                        <GiftGridItem key={img.id} {...img} /> //enviando las imagenes con el spread, permite enviar las propiedades como un solo objeto, q puede desestructurase del otro lado\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { obtenerGifts } from '../helpers/getGifs';\r\n\r\nexport const useFecthGifs = (categoria) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        obtenerGifts(categoria).then(imgs => setState({\r\n            data: imgs,\r\n            loading: false\r\n        }));\r\n    },\r\n        [categoria]\r\n    ); // con la lista de dependensias vacias seria como el DidMount(), en react basado en clases\r\n    //cuando s epasa la categoria por depencia, dispara a que se recargue solo en caso de q la categoria haya cargado\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react';\r\nimport { AgregarCategoria } from './components/AgregarCategoria';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GitExpertApp = () => {\r\n    const [categorias, setCategorias] = useState(['Samurai Jack']);\r\n    // const handleAgregar=()=>{                      \r\n    //     //setCategorias( [...categorias, 'Lufydono']); // usando operador spread\r\n    //     setCategorias( cate =>[...categorias,'Lufydono']); // usando funcion callback\r\n    // }\r\n    return (\r\n        <div>\r\n            <h2>Git Exper tApp</h2>\r\n            <AgregarCategoria setCategorias={setCategorias} />\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categorias.map(categoria => {\r\n                        return (\r\n                            <GifGrid key={categoria} categoria={categoria}></GifGrid>\r\n                        );\r\n                    })\r\n                }\r\n            </ol>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GitExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport GitExpertApp from './GitExpertApp';\n\nReactDOM.render(\n  <GitExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}